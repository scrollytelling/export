#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

if [ $# -eq 0 ]
then
	echo "This script exports an entire Scrollytelling account to HTML."
	echo "The export is dumped in HOME for your enjoyment. Don't swallow everything at once."
	echo
	echo "Pass the hostname you wish to export as paramater."
	echo "Usage: $0 <cname>"
	echo "  e.g. $0 stories.example.com"
	echo
	exit 1
fi

set -vx

## Some paths you might want to change
SCROLLY="${HOME}/Rails/Scrollytelling"
DEST="${HOME}"
ACCOUNT="${HOME}/${cname}"

# Bundler, for Ruby
gem install bundler --conservative
bundle check || bundle install

# Setup variables to use throughout the script.
cname=$1

# STEP: query the database and build index.json
$SCROLLY/bin/rails runner ./step_1_build_index/published_entries.rb $cname

# STEP: download index.html to story folders.
step_2_download_story/canonical_urls $cname \
	| parallel http --download --output $ACCOUNT/{/}/original.html GET {}

# and the story-specific CSS
step_2_download_story/canonical_urls $cname \
  | parallel http GET https://$cname/entries/{/}.css \
	"|"ruby ./step_2_download_story/replace.rb ">"$ACCOUNT/entries/{/}.css

# STEP: massage the HTML until it's fit for archiving.
parallel ruby ./step_2_download_story/replace.rb \
	"<"{} ">"{//}/index.html ::: $ACCOUNT/*/original.html

# STEP: sync media bucket
#   add --dryrun before the last quote to see what it will do
./step_3_sync_assets/media_folders $cname \
	| parallel "aws s3 sync s3://{} ${ACCOUNT}/{}"

# STEP: sync output bucket. Bucket name is different from local path.
#   add --dryrun before the last quote to see what it will do
./step_3_sync_assets/output_folders $cname \
	| parallel "aws s3 sync s3://storyboard-pageflow-production-out{} \
	${ACCOUNT}/output.scrollytelling.com{}"

# STEP: unpack static assets.
unzip ./artifacts/assets.zip -d $ACCOUNT/scrollytelling.link
unzip ./artifacts/output.zip -d $ACCOUNT/output.scrollytelling.com
unzip ./artifacts/root.zip -d $ACCOUNT

# STEP: make browser screenshots for each page of every story.
./step_4_screenshots/grab $cname

# Convert the PNGs to JPGs
parallel vips jpegsave {} {.}.jpg ::: $ACCOUNT/*/screenshots/*.png
vipsthumbnail $ACCOUNT/*/screenshots/*.png --format=%s_280.jpg --size=280

# STEP: remove unwanted artifacts
rm robots.txt

# STEP: compile templates based on exported information.
cd step_3_account_index
# NPM, for Node
npm -v
npm install -g npm-check
npm-check

npm run mustache:all
